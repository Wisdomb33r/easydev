<?php
/*********************************************************************************
 * Autogenerated class
 * EasyDev v 0.x copyright Patrick Mingard 2007
 * Any modification of this code can alter the behaviour of EasyDev v 0.x console
 ********************************************************************************/

require_once 'includes/connection.php';
<% foreach($this->fieldlist as $field){
  if($field->type == 'relation1N' || $field->type == 'relationNM'){
    %>require_once 'object_<% echo $field->label; %>.class.php';
<%
  }
}%>

class <% echo $this->name; %>{
  // variables of the class
  var $id;<%
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
%>
  var <% echo '$'.$field->label; %>;<%
    break;
  case 'relation1N':
%>
  var $relation1N<% echo $field->options['relationname']; %>;<%
    break;
  case 'relationNM':
%>
  var $relationNM<% echo $field->options['relationname']; %>;<%
	break;
  }
}
%>
  /* 
   * Public constructor of the class. The id is set to zero because the object still do not exist in database.
   * The finders can call a private function defined here after to initialize the id to a different value (private function so the user cannot access it, only finders from this class).
   */
  function __construct(<% 
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
    if(!$first){
      echo ', $'.$field->label;
    }
    else{
      echo '$'.$field->label;
    }
    $first = false;
    break;
  case 'relation1N':
  case 'relationNM':
    break;
  } 
}%>){
    $this->id = 0;<% 
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
%>
    $this-><% echo $field->label; %> = $<% echo $field->label; %>;<%
    break;
  case 'relation1N':
%>
    $this->relation1N<% echo $field->options['relationname']; %> = null;<%
	break;
  case 'relationNM':
%>
    $this->relationNM<% echo $field->options['relationname']; %> = array();<%
    break;
  }
}%>
  }

  /* Getter for the different attributes
   * @param string $name the name of the attribute to get.
   */
  public function __get($name){
    return $this->$name;
  }

  /* Setter for the different attributes
   * @param string $name the name of the attribute to set.
   * @param mixed $value the value to associate to the attribute.
   */
  public function __set($name, $value){
    if($name == 'id'){
      die('FATAL ERROR : trying to set manually a primary id.');
    }
    $this->$name = $value;
  }

  /* Special setter for the id for finder initialization.
   * @param integer $id the value of the id to set to the object.
   */
  private function setId($id){
    $this->id = $id;
  }

  /* Persist the object in the database. 
   * The object is inserted if the primary id is equal to zero (zero init is done by the constructor), 
   * or updated if the primary id is not equal to zero (non-zero init is done by the finders).
   */
  public function store(){
<% 
foreach($this->fieldlist as $field){
  if($field->type == 'relation1N'){
%>    if($this->relation1N<% echo $field->options['relationname']; %> == null){
     die('Error - Trying to store an object before setting a relation 1:N');
    }<%
  }
}
%>
    $query = '';
    if($this->id == '0'){
      $query = 'INSERT INTO object_<% echo $this->name; %> (<%
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
    if(!$first){
      echo ', ';
    }
    echo $field->label;
    $first = false;
    break;
  case 'relation1N':
    if(!first){
      echo ', ';
    }
    echo '1n_rel_'.$field->options['relationname'];
    $first = false;
    break;
  }
}
%>) VALUES ("<%
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
    if(!$first){
      echo '", "';
    }
    echo '\'.$this->'.$field->label.'.\'';
    $first = false;
    break;
  case 'relation1N':
    if(!$first){
      echo '", "';
    }
    echo '\'.$this->relation1N'.$field->options['relationname'].'->id.\'';
    $first = false;
  }
}
%>")';
    }
    else{
      $query = 'UPDATE object_<% echo $this->name; %> SET <%
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
    if(!$first){
      echo ', ';
    }
    echo $field->label.'="\'.$this->'.$field->label.'.\'"';
    $first = false;
    break;
  case 'relation1N':
    if(!$first){
      echo ', ';
    }
    echo '1n_rel_'.$field->options['relationname'].'="\'.$this->relation1N'.$field->options['relationname'].'->id.\'"';
    $first = false;
    break;
  }
}

%> WHERE id="'.$this->id.'"';
    }
    mysql_query($query) or die('Error while updating objects.<br />'.$query);

    // if the object was inserted and not updated, need to retrieve its primary id
    if($this->id == '0'){
      $query = 'SELECT LAST_INSERT_ID()';
      $result = mysql_query($query);
      $line = mysql_fetch_array($result);
      $this->id = $line[0];
    }
  }

  /* Let the user delete any object of the database.
   */
  public function remove(){
    $query = 'DELETE FROM object_<% echo $this->name; %> WHERE id="'.$this->id.'"';
    mysql_query($query) or die('Error while removing an object.<br />'.$query);
    $this->id = 0; // restore a zero id so the user can call store() afterwards (it will act as a new object)
  }
<%
foreach($this->fieldlist as $field){
  if($field->type == 'relationNM'){%>
  /* Let the user add one relation between two objects in the relation <% echo $field->options['relationname']; %>.
   * @param 
   */
  public function addrelationNM<% echo $field->options['relationname']; %>(<% echo $field->label; %> $foreignobject){
    if($foreignobject->id != 0 && $this->id != 0){ // verify that none of the objects are volatile, that is, not in the database<%
      if(isset($field->options['secondobject']) && $field->options['secondobject']){%>
      $query = 'INSERT INTO object_<% echo $field->label; %>_<% echo $this->name; %>_<% echo $field->options['relationname']; %>_nmrelation '.
               '(id_<% echo $field->label; %>, id_<% echo $this->name; %>) '.
               'VALUES ("'.$foreignobject->id.'", "'.$this->id.'")';
      mysql_query($query) or die('Error while inserting relation N:M in second object.<br />'.$query);<%
      }
      else{%>
      $query = 'INSERT INTO object_<% echo $this->name; %>_<% echo $field->label; %>_<% echo $field->options['relationname']; %>_nmrelation '.
               '(id_<% echo $this->name; %>, id_<% echo $field->label; %>) '.
               'VALUES ("'.$this->id.'", "'.$foreignobject->id.'")';
      mysql_query($query) or die('Error while inserting relation N:M in first object.<br />'.$query);<%
      }%>
    }
    else{
      return false;
    }
  }

  /* Let the user remove one relation between two objects in the relation <% echo $field->options['relationname']; %>.
   * @param 
   */
  public function removerelationNM<% echo $field->options['relationname']; %>(<% echo $field->label; %> $foreignobject){
    if($foreignobject->id != 0 && $this->id != 0){ // verify that none of the objects is volatile, that is, not in the database<%
      if(isset($field->options['secondobject']) && $field->options['secondobject']){%>
        $query = 'DELETE FROM object_<% echo $field->label; %>_<% echo $this->name; %>_<% echo $field->options['relationname']; %>_nmrelation '.
                 'WHERE id_<% echo $field->label; %>="'.$foreignobject->id.'" AND id_<% echo $this->name; %>="'.$this->id.'"'.
        mysql_query($query) or die('Error while deleting relation N:M in second object.<br />'.$query);<%
      }
      else{%>
        $query = 'INSERT INTO object_<% echo $this->name; %>_<% echo $field->label; %>_<% echo $field->options['relationname']; %>_nmrelation '.
                 'WHERE id_<% echo $this->name; %>="'.$this->id.'" AND id_<% echo $field->label; %>="'.$foreignobject->id.'"';
        mysql_query($query) or die('Error while deleting relation N:M in first object.<br />'.$query);<%
      }%>
    }
    else{
      return false;
    }
  }
<%
  }
}
%>

  /* Let the user store one relation

  /* General finder. Returns all the objects of the database.
   */
  public static function find(){
    $query = 'SELECT * FROM object_<% echo $this->name; %>';
    $result = mysql_query($query) or die('Error while loading objects.<br />'.$query);
    $objectlist = array();
    while($line = mysql_fetch_array($result)){
      // create the object with the database values
      $object = new <% echo $this->name; %>(<% 
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
    if(!$first){
      echo ', ';
    }
    echo '$line[\''.$field->label.'\']';
    $first = false;
    break;
  } 
}
%>);
      // set the relations<%
foreach($this->fieldlist as $field){
  if($field->type == 'relation1N'){%>
      $object->relation1N<% echo $field->options['relationname']; %> = $line['1n_rel_<% echo $field->options['relationname']; %>'];<%
  }
}%>
      $object->setId($line['id']);
      array_push($objectlist, $object);
    }

    return $objectlist;
  }

  /* Finder for the primary id
   * @param integer id the identifier of the object to return
   */
  public static function findByPrimaryId($id){
    $query = 'SELECT * FROM object_<% echo $this->name; %> WHERE id="'.$id.'"';
    $result = mysql_query($query) or die('Error while selecting objects.<br />'.$query);
    $line = mysql_fetch_array($result);
    $object = new <% echo $this->name; %>(<%
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
    if(!$first){
      echo ', ';
    }
    echo '$line[\''.$field->label.'\']';
    $first = false;
    break;
  } 
}
%>);
    // set the relations<%
foreach($this->fieldlist as $field){
  if($field->type == 'relation1N'){%>
      $object->relation1N<% echo $field->options['relationname']; %> = $line['1n_rel_<% echo $field->options['relationname']; %>'];<%
  }
}%>
    $object->setId($line['id']);
    return $object;
  }

<% foreach($this->fieldlist as $field){
  if($field->type == 'finder'){
%>  /* User defined finder.
   */
  public static function finder<% echo $field->label; %>(<% 
$first = true;
foreach($field->options['finderparameters'] as $param){
  if(!$first){
    echo ', $'.$param;
  }
  else{
    $first = false;
    echo '$'.$param;
  }
}
%>){<%
$userquery = $field->options['finderquery'];
foreach($field->options['finderparameters'] as $param){
  $userquery = str_replace($param, '"\'.$'.$param.'.\'"', $userquery);
}
%>
    $query = '<% echo $userquery; %>';
    $result = mysql_query($query) or die('Error while selecting objects.<br />'.$query);

    $objectlist = array();
    while($line = mysql_fetch_array($result)){
      // create the object with the database values
      $object = new <% echo $this->name; %>(<% 
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
    if(!$first){
      echo ', ';
    }
    echo '$line[\''.$field->label.'\']';
    $first = false;
    break;
  } 
}
%>);
      // set the relations<%
foreach($this->fieldlist as $field){
  if($field->type == 'relation1N'){%>
      $object->relation1N<% echo $field->options['relationname']; %> = $line['1n_rel_<% echo $field->options['relationname']; %>'];<%
  }
}%>
      $object->setId($line['id']);
      array_push($objectlist, $object);
    }

    return $objectlist;
  }
<%
  }
}
%>

<% foreach($this->fieldlist as $field){
  if($field->type == 'updater'){
%>  /* User defined finder.
   */
  public static function updater<% echo $field->label; %>(<% 
$first = true;
foreach($field->options['finderparameters'] as $param){
  if(!$first){
    echo ', $'.$param;
  }
  else{
    $first = false;
    echo '$'.$param;
  }
}
%>){<%
$userquery = $field->options['finderquery'];
foreach($field->options['finderparameters'] as $param){
  $userquery = str_replace($param, '"\'.$'.$param.'.\'"', $userquery);
}
%>
    $query = '<% echo $userquery; %>';
    $result = mysql_query($query) or die('Error while updating objects.<br />'.$query);
  }
<%
  }
}
%>

} // end of class definition
?>
