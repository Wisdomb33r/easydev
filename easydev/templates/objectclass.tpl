<?php
/*********************************************************************************
 * Autogenerated script
 * EasyDev 1.x copyright Patrick Mingard 2007-2010
 * Any modification of this code may alter the behaviour of EasyDev 2.x console
 ********************************************************************************/

require_once dirname(__FILE__).'/../includes/connection.php';
require_once dirname(__FILE__).'/../includes/constants.php';
require_once dirname(__FILE__).'/../includes/translator.class.php';<% 
foreach($this->fieldlist as $field){
  if($field->type == 'relation1N' || $field->type == 'relationNM'){%>
require_once 'object_<% echo $field->label; %>.class.php';<%
  }
}%>

class <% echo $this->name; %>{
  // static array as cache
  public static $objects_<% echo $this->name; %>;
  // variables of the class
  protected $id;<%
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
  case 'date':
  case 'text':
%>
  protected <% echo '$'.$field->label; %>;<%
    break;
  case 'file':%>
  protected <% echo '$'.$field->label; %>_temp_file_extension;<%
  case 'image':
%>
  protected <% echo '$'.$field->label; %>;
  protected <% echo '$'.$field->label; %>_server_temp_file;
  protected <% echo '$'.$field->label; %>_delete_flag;<%
    break;
  case 'datetime':%>
  protected $<%echo $field->label; %>date;
  protected $<%echo $field->label; %>hour;
  protected $<%echo $field->label; %>mins;<%
    break;
  case 'password':
%>
  protected $<% echo $field->label; %>; // should be encrypted with sha1() function
  protected $<% echo $field->label; %>_confirmation;
  protected $<% echo $field->label; %>_hashed;<%
    break;
  case 'relation1N':
%>
  protected $relation1N<% echo $field->options['relationname']; %>;<%
    break;
  case 'relationNM':
%>
  protected $relationNM<% echo $field->options['relationname']; %>;
  protected $relationNM<% echo $field->options['relationname']; %>LoadDone = false;<%
	break;
  }
}
%>

  public $errors; // to store the errors of this object before database insert

  /* 
   * Public constructor of the class.
   * @param array $values an associative table for the values to insert in the object.
   */
  function __construct(array $values){
    $this->errors = array();
    $this->updateObject($values);
  }

  /* Update the object with an associative table.
   * @param array $values the values to insert in the object.
   */
  public function updateObject(array $values){<%
foreach($this->fieldlist as $field){
  switch($field->type){
  	case 'password':%>
  	if(isset($values['<% echo $field->label; %>']) && isset($values['_confirmation']) && $values['<% echo $field->label; %>'] == '' && $values['<% echo $field->label; %>_confirmation'] == ''){
  	  unset($values['<% echo $field->label; %>']);
  	  unset($values['<% echo $field->label; %>_confirmation']);
  	}<%
  	case 'image':
  	case 'file':%>
  	if(isset($values['<% echo $field->label; %>_delete_flag']) && $values['<% echo $field->label; %>_delete_flag'] === '1') $this-><% echo $field->label; %>_delete_flag = true;<%
  	  break;
  }
}%>
  
<%
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
  case 'date':
  case 'image':
  case 'file':
  case 'text':%>
  	if(isset($values['<% echo $field->label; %>'])) $this-><% echo $field->label; %> = $values['<% echo $field->label; %>'];<%
  	break;
  case 'password':%>
    if(isset($values['<% echo $field->label; %>'])) $this-><% echo $field->label; %> = $values['<% echo $field->label; %>'];
    if(isset($values['<% echo $field->label; %>_confirmation'])) $this-><% echo $field->label; %>_confirmation = $values['<% echo $field->label; %>_confirmation'];
    if(isset($values['<% echo $field->label; %>_hashed'])) $this-><% echo $field->label; %>_hashed = $values['<% echo $field->label; %>_hashed'];<%
    break;
  case 'datetime':%>
  	if(isset($values['<% echo $field->label; %>date']) && isset($values['<% echo $field->label; %>hour']) && isset($values['<% echo $field->label; %>mins'])){
  	  $this-><% echo $field->label; %>date = $values['<% echo $field->label; %>date'];
  	  $this-><% echo $field->label; %>hour = $values['<% echo $field->label; %>hour'];
  	  $this-><% echo $field->label; %>mins = $values['<% echo $field->label; %>mins'];
  	}<%
  	break;
  default:
  	break;
  }
}%>
  }
  
  /* Getter for the different attributes
   * @param string $name the name of the attribute to get.
   */
  public function __get($name){<%
foreach($this->fieldlist as $field){
	if($field->type == 'datetime'){%>
    if($name == '<% echo $field->label; %>'){
      $this-><% echo $field->label; %> = $this-><% echo $field->label; %>date.' '.$this-><% echo $field->label; %>hour.':'.$this-><% echo $field->label; %>mins;
    }<%
	}
	if($field->type == 'relation1N'){%>
	if($name == '<% echo $field->options['relationname']; %>'){
	  $this-><% echo $field->options['relationname']; %> = <% echo $field->label; %>::findByPrimaryId($this->relation1N<% echo $field->options['relationname']; %>);
	}<%
	}
	if($field->type == 'relationNM'){%>
	if($name == '<% echo $field->options['relationname']; %>'){
	  if(! $this->relationNM<% echo $field->options['relationname']; %>LoadDone){
	    $this->__get('relationNM<% echo $field->options['relationname']; %>');
	  }
	  
	  if( isset($this-><% echo $field->options['relationname']; %>) && is_array($this-><% echo $field->options['relationname']; %>)){
	  	return $this-><% echo $field->options['relationname']; %>;
	  }
	  else {
	    $this-><% echo $field->options['relationname']; %> = array();
	    if(count($this->relationNM<% echo $field->options['relationname']; %>)){
	      foreach($this->relationNM<% echo $field->options['relationname']; %> as $id){
	        if($relatedobject = <% echo $field->label; %>::findByPrimaryId($id)){
	          $this-><% echo $field->options['relationname']; %>[] = $relatedobject;
	        }
	      }
	    }
	  }
	}
	if($name == 'relationNM<% echo $field->options['relationname']; %>'){
      if($this->relationNM<% echo $field->options['relationname']; %>LoadDone){
        return $this->relationNM<% echo $field->options['relationname']; %>;
      }
      else {<%
if(isset($field->options['secondobject']) && $field->options['secondobject']){%>
        global $querycount;
  	    if(! is_numeric($querycount)) $querycount = 0;
  	    else $querycount++;
        $query = 'SELECT id_<% echo $field->label; %> FROM object_<% echo $field->label; %>_<% echo $this->name; %>_<% echo $field->options['relationname']; %>_nmrelation '
                .'WHERE id_<% echo $this->name; %>="'.$this->id.'"';<%
}
else{%>
        global $querycount;
  	    if(! is_numeric($querycount)) $querycount = 0;
  	    else $querycount++;
        $query = 'SELECT id_<% echo $field->label; %> FROM object_<% echo $this->name; %>_<% echo $field->label; %>_<% echo $field->options['relationname']; %>_nmrelation '
                .'WHERE id_<% echo $this->name; %>="'.$this->id.'"';<%
}%>
        $result2 = mysql_query($query) or die('Error while selecting N:M relations.');

        $relationNMidlist = array();
        while($row2 = mysql_fetch_array($result2)){
          $relationNMidlist[] = $row2[0];
        }
        $this->relationNM<% echo $field->options['relationname']; %> = $relationNMidlist;
        $this->relationNM<% echo $field->options['relationname']; %>LoadDone = true;
      }
	}<%
	}
}%>
    return $this->$name;
  }

  /* Setter for the different attributes
   * @param string $name the name of the attribute to set.
   * @param mixed $value the value to associate to the attribute.
   */
  public function __set($name, $value){
    if($name == 'id'){
      die('EasyDev FATAL ERROR : trying to update a primary key.');<%
foreach($this->fieldlist as $field){
  if($field->type == 'relation1N'){%>
    if($name == 'relation1N<% echo $field->options['relationname']; %>')
      die('EasyDev FATAL ERROR : trying to update a foreign key. Please use setRelation auto-generated function instead.');<%
  }
  if($field->type == 'relationNM'){%>
    if($name == 'relationNM<% echo $field->options['relationname']; %>')
      die('EasyDev FATAL ERROR : trying to update a foreign key. Please use addRelation / removeRelation auto-generated functions instead.');<%
  }
}%>
    }
    $this->$name = $value;
  }

<% 
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'relation1N':%>
  /* Create a relation 1:N with an external object as an external key.
   * NOTE : This public function has to be called by user application.
   * @param <% echo $field->label; %> $foreignobject the foreign object.
   * @return boolean true if the foreign key was properly updated, false otherwise.
   */
  public function setrelation<% echo $field->options['relationname']; %>(<% echo $field->label; %> $foreignobject<% if(isset($field->options['nullable']) && $field->options['nullable']) echo '=null'; %>){
    if($foreignobject && $foreignobject->id){
      $this->relation1N<% echo $field->options['relationname']; %> = $foreignobject->id;
	  return true;
    }
	else{<%
if(isset($field->options['nullable']) && $field->options['nullable']){%>
      $this->relation1N<% echo $field->options['relationname']; %> = null;<%
}
else{%>
	  return false;<%
}%>
	}
  }
<%  break;
  case 'relationNM':%>
  /* Let the user add an external object to the relation N:M.
   * NOTE : This function do not call the symetrical one in foreign object. The user has to call it himself.
   * @param <% echo $field->label; %> $foreignobject the foreign object to add in the relation.
   * @param boolean true if the object id was added to the list, false otherwise.
   */
  public function addrelation<% echo $field->options['relationname']; %>(<% echo $field->label; %> $foreignobject){
  	if(! $this->relationNM<% echo $field->options['relationname']; %>LoadDone){
  	  $this->__get('relationNM<% echo $field->options['relationname']; %>');
  	}
	if($foreignobject && $foreignobject->id && ! in_array($foreignobject->id, $this->relationNM<% echo $field->options['relationname']; %>)){
	  array_push($this->relationNM<% echo $field->options['relationname']; %>, $foreignobject->id);
	  return true;
	}
	else{
	  return false;
	}
  }

  /* Let the user remove an external object from the relation N:M.
   * NOTE : This function do not call the symetrical one in foreign object. The user has to call it himself.
   * @param <% echo $field->label; %> $foreignobject the foreign object to remove from the relation.
   * @return boolean true if the link has been properly removed, false otherwise.
   */
  public function removerelation<% echo $field->options['relationname']; %>(<% echo $field->label; %> $foreignobject){
  	if(! $this->relationNM<% echo $field->options['relationname']; %>LoadDone){
  	  $this->__get('relationNM<% echo $field->options['relationname']; %>');
  	}
	if(! $foreignobject || ! $foreignobject->id){
	  return false;
	}
	$arraykey = array_search($foreignobject->id, $this->relationNM<% echo $field->options['relationname']; %>);
	if($arraykey !== false){
	  array_splice($this->relationNM<% echo $field->options['relationname']; %>, $arraykey, 1);
	  return true;
	}
	else{
	  return false;
	}
  }
<%
	break;
  }
}%>

  /* Verify the values stored in the object to evaluate if it is complete for a database insert / update. Also initialize the error table contained in the object.
   */
  public function verifyValues(){<%
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':%>
    if(! preg_match('/^[\-]?[0-9]+$/', $this-><% echo $field->label;%>))<%
    if(isset($field->options['nullable']) && $field->options['nullable']){ %>
      if(isset($this-><% echo $field->label; %>) && $this-><% echo $field->label; %> !== '')<%
    }%>
        $this->errors[] = Translator::translate('generator_add_object_expected_integer').'<% echo $field->label;%>';<%
    break;
  case 'string':
  case 'text':
    if(! isset($field->options['nullable']) || ! $field->options['nullable']){ %>
  	if(strlen($this-><% echo $field->label;%>) == 0) $this->errors[] = Translator::translate('generator_add_object_empty_text_error').'<% echo $field->label;%>';<%
    }
    break;
  case 'image':
    if(isset($field->options['nullable']) && $field->options['nullable']){%>
    if(isset($_FILES['<% echo $field->label; %>']) && $_FILES['<% echo $field->label; %>']['error'] != UPLOAD_ERR_NO_FILE){
      $this->verifyImageFromForm('<% echo $field->label; %>');
    }<%
    }
    else{%>
  	if(!$this-><% echo $field->label; %> || (isset($_FILES['<% echo $field->label; %>']) && $_FILES['<% echo $field->label; %>']['error'] != UPLOAD_ERR_NO_FILE)){
  	  $this->verifyImageFromForm('<% echo $field->label; %>');
  	}<%
    }
  	break;
  case 'file':
    if(isset($field->options['nullable']) && $field->options['nullable']){%>
    if(isset($_FILES['<% echo $field->label; %>']) && $_FILES['<% echo $field->label; %>']['error'] != UPLOAD_ERR_NO_FILE){
      $this->verifyFileFromForm('<% echo $field->label; %>');
    }<%
    }
    else{%>
  	if(!$this-><% echo $field->label; %> || (isset($_FILES['<% echo $field->label; %>']) && $_FILES['<% echo $field->label; %>']['error'] != UPLOAD_ERR_NO_FILE)){
  	  $this->verifyFileFromForm('<% echo $field->label; %>');
  	}<%
    }
  	break;
  case 'double': %>
    if(! preg_match('/^[\-]?[0-9]+([\.][0-9]+)?$/', $this-><% echo $field->label;%>))<%
    if(isset($field->options['nullable']) && $field->options['nullable']){ %>
      if(isset($this-><% echo $field->label; %>) && $this-><% echo $field->label; %> !== '')<%
    }%>
        $this->errors[] = Translator::translate('generator_add_object_expected_double').'<% echo $field->label;%>';<%
    break;
  case 'bool': %>
    if($this-><% echo $field->label; %> !== '1' && $this-><% echo $field->label; %> !== '0')<%
    if(isset($field->options['nullable']) && $field->options['nullable']){ %>
      if(isset($this-><% echo $field->label; %>) && $this-><% echo $field->label; %> !== '')<%
    }%>
        $this->errors[] = Translator::translate('generator_add_object_boolean_unset').'<% echo $field->label;%>';<%
    break;
  case 'date': %>
  	$exploded = explode('-', $this-><% echo $field->label; %>);
    if(count($exploded) != 3 || $exploded[0] < 1901 || $exploded[0] > 2038 || $exploded[1] > 12 || $exploded[1] < 1 || $exploded[2] > 31 || $exploded[2] < 1){<%
    if(isset($field->options['nullable']) && $field->options['nullable']){ %>
      if(isset($this-><% echo $field->label; %>) && $this-><% echo $field->label; %> !== '')<%
    }%>
        $this->errors[] = Translator::translate('generator_add_object_date_format_error').'<% echo $field->label;%>';
    }<%
    break;
  case 'datetime': %>
    $expl = explode('-', $this-><% echo $field->label; %>date);
    if(count($expl) != 3 || $expl[0] < 1901 || $expl[0] > 2038 || $expl[1] > 12 || $expl[1] < 1 || $expl[2] > 31 || $expl[2] < 1){<%
    if(isset($field->options['nullable']) && $field->options['nullable']){ %>
      if(isset($this-><% echo $field->label; %>) && $this-><% echo $field->label; %> !== '')<%
    }%>
        $this->errors[] = Translator::translate('generator_add_object_date_format_error').'<% echo $field->label;%>';
    }
    if($this-><% echo $field->label; %>hour > 24 || $this-><% echo $field->label; %>hour < 0 || $this-><% echo $field->label; %>hour === ''){<%
    if(isset($field->options['nullable']) && $field->options['nullable']){ %>
      if(isset($this-><% echo $field->label; %>) && $this-><% echo $field->label; %> !== '')<%
    }%>
        $this->errors[] = Translator::translate('generator_add_object_hour_format_error').'<% echo $field->label;%>';
    }
    if($this-><% echo $field->label; %>mins > 59 || $this-><% echo $field->label; %>mins < 0 || $this-><% echo $field->label; %>mins === ''){<%
    if(isset($field->options['nullable']) && $field->options['nullable']){ %>
      if(isset($this-><% echo $field->label; %>) && $this-><% echo $field->label; %> !== '')<%
    }%>
        $this->errors[] = Translator::translate('generator_add_object_mins_format_error').'<% echo $field->label;%>';
    }<%
    break;
  case 'password': %>
    // if the unencrypted password field and its confirmation are initialized
    if(isset($this-><% echo $field->label; %>) && isset($this-><% echo $field->label; %>_confirmation) && ($this-><% echo $field->label; %> != '' || $this-><% echo $field->label; %>_confirmation != '')){
      // verify the password and its confirmation
      if(strlen($this-><% echo $field->label; %>) < 8) $this->errors[] = Translator::translate('generator_add_object_pass_length_error').'<% echo $field->label; %>';
      if($this-><% echo $field->label; %> != $this-><% echo $field->label; %>_confirmation) $this->errors[] = Translator::translate('generator_add_object_pass_and_confirm_not_identical_error').'<% echo $field->label; %>';
      // initialize the hashed password
      $this-><% echo $field->label; %>_hashed = sha1($this-><% echo $field->label; %>);
    }
    else{ // the unencrypted password field and its confirmation are NOT initialized
      // verify the hashed password is already set, a password must be present
      if(! isset($this-><% echo $field->label; %>_hashed) || ! $this-><% echo $field->label; %>_hashed){
      	$this->errors[] = Translator::translate('generator_add_object_pass_unset_error').'<% echo $field->label; %>';
      }
    }<%
  	break;
  case 'relation1N': 
  	if(!isset($field->options['nullable']) || ! $field->options['nullable']){%>
    if($this->relation1N<% echo $field->options['relationname']; %> == null || ! ($foreignobject = <% echo $field->label; %>::findByPrimaryId($this->relation1N<% echo $field->options['relationname']; %>))) $this->errors[] = Translator::translate('generator_add_object_relation1N_unset_error').'<% echo $field->options['relationname']; %>';<%
  	}
  	break;
  default:
    break;
  }
}%>
  	return (count($this->errors) > 0 ? false : true);
  }

  /* Persist the object in the database. 
   * The object is inserted if the primary id is equal to zero (zero init is done by the constructor), 
   * or updated if the primary id is not equal to zero (non-zero init is done by the finders).
   */
  public function store($validatefunction = 'verifyValues'){
  	if($this->$validatefunction()){<%
foreach($this->fieldlist as $field){
  if($field->type == 'relationNM'){%>
      if(! $this->relationNM<% echo $field->options['relationname']; %>LoadDone){
        $this->__get('relationNM<% echo $field->options['relationname']; %>');
      }<%
  }
}%>
  	  mysql_query('START TRANSACTION');
      $query = '';
      if(!isset($this->id)){
        $query = 'INSERT INTO object_<% echo $this->name; %> (<%
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
  case 'date':
  case 'text':
  case 'datetime':
  case 'password':
    if(!$first){
      echo ', ';
    }
    echo $field->label;
    $first = false;
    break;
  case 'relation1N':
    if(!$first){
      echo ', ';
    }
    echo '1n_rel_'.$field->options['relationname'];
    $first = false;
    break;
  }
}
%>) VALUES (<%
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
  case 'date':
  case 'text':
    if(!$first){
      echo ', ';
    }
    if(isset($field->options['nullable']) && $field->options['nullable']){
      echo '\'.(!isset($this->'.$field->label.') || $this->'.$field->label.' == \'\' ? \'NULL\' : \'"\'.addslashes($this->'.$field->label.').\'"\').\'';
    }
    else{
      echo '"\'.addslashes($this->'.$field->label.').\'"';
    }
    $first = false;
    break;
  case 'password':
    if(!$first){
      echo ', ';
    }
    echo '"\'.addslashes($this->'.$field->label.'_hashed).\'"';
    $first = false;
    break;
  case 'datetime':
  	if(!$first){
      echo ', ';
  	}
  	if(isset($field->options['nullable']) && $field->options['nullable']){
      echo '\'.(!isset($this->'.$field->label.'date) || $this->'.$field->label.'date == \'\' || !isset($this->'.$field->label.'hour) || $this->'.$field->label.'hour == \'\' || !isset($this->'.$field->label.'mins) || $this->'.$field->label.'mins == \'\' ? \'NULL\' : \'"\'.$this->'.$field->label.'date.\' \'.$this->'.$field->label.'hour.\':\'.$this->'.$field->label.'mins.\':00"\').\'';
    }
    else{
  	  echo '"\'.$this->'.$field->label.'date.\' \'.$this->'.$field->label.'hour.\':\'.$this->'.$field->label.'mins.\':00"';
  	}
  	$first = false;
  	break;
  case 'relation1N':
    if(!$first){
      echo ', ';
    }
    if(isset($field->options['nullable']) && $field->options['nullable']){
      echo '\'.(!isset($this->relation1N'.$field->options['relationname'].') || $this->relation1N'.$field->options['relationname'].' == \'\' ? \'NULL\' : \'"\'.addslashes($this->relation1N'.$field->options['relationname'].').\'"\').\'';
    }
    else{
      echo '"\'.$this->relation1N'.$field->options['relationname'].'.\'"';
    }
    $first = false;
    break;
  }
}
%>)';
      }
      else{
        $query = 'UPDATE object_<% echo $this->name; %> SET <%
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double':
  case 'bool':
  case 'date':
  case 'text':
    if(!$first){
      echo ', ';
    }
    if(isset($field->options['nullable']) && $field->options['nullable']){
      echo $field->label.'=\'.(!isset($this->'.$field->label.') || $this->'.$field->label.' == \'\' ? \'NULL\' : \'"\'.addslashes($this->'.$field->label.').\'"\').\'';
    }
    else{
      echo $field->label.'="\'.addslashes($this->'.$field->label.').\'"';
    }
    $first = false;
    break;
  case 'password':
    if(!$first){
      echo ', ';
    }
    echo $field->label.'="\'.addslashes($this->'.$field->label.'_hashed).\'"';
    $first = false;
    break;
  case 'datetime':
  	if(!$first){
      echo ', ';
    }
    if(isset($field->options['nullable']) && $field->options['nullable']){
      echo $field->label.'=\'.(!isset($this->'.$field->label.'date) || $this->'.$field->label.'date == \'\' || !isset($this->'.$field->label.'hour) || $this->'.$field->label.'hour == \'\' || !isset($this->'.$field->label.'mins) || $this->'.$field->label.'mins == \'\' ? \'NULL\' : \'"\'.$this->'.$field->label.'date.\' \'.$this->'.$field->label.'hour.\':\'.$this->'.$field->label.'mins.\':00"\').\'';
    }
    else{
      echo $field->label.'="\'.$this->'.$field->label.'date.\' \'.$this->'.$field->label.'hour.\':\'.$this->'.$field->label.'mins.\':00"';
    }
    $first = false;
  	break;
  case 'relation1N':
    if(!$first){
      echo ', ';
    }
    if(isset($field->options['nullable']) && $field->options['nullable']){
      echo '1n_rel_'.$field->options['relationname'].'=\'.(!isset($this->relation1N'.$field->options['relationname'].') || $this->relation1N'.$field->options['relationname'].' == \'\' ? \'NULL\' : \'"\'.addslashes($this->relation1N'.$field->options['relationname'].').\'"\').\'';
    }
    else{
      echo '1n_rel_'.$field->options['relationname'].'="\'.$this->relation1N'.$field->options['relationname'].'.\'"';
    }
    $first = false;
    break;
  }
}

%> WHERE id="'.$this->id.'"';
      }
      mysql_query($query) or die('Error while inserting / updating object.');

      // if the object was inserted and not updated, need to retrieve its primary id
      if(! isset($this->id)){
        $query = 'SELECT LAST_INSERT_ID()';
        $result = mysql_query($query) or die('Cannot select last inserted id.');
        $line = mysql_fetch_array($result);
        $this->id = $line[0];
      }

      // if the object has some images, need to initialize the file name and move them from temp directory
<%
foreach($this->fieldlist as $field){
  if($field->type == 'image'){%>
      if(isset($this-><% echo $field->label; %>_delete_flag) && $this-><% echo $field->label; %>_delete_flag === true){
        $this->removeImage<% echo $field->label; %>();
        unset($this-><% echo $field->label; %>);
        mysql_query('UPDATE object_<% echo $this->name; %> SET <% echo $field->label; %>=NULL WHERE id="'.$this->id.'"') or die('Error while updating image filename.');
      }
      if(isset($this-><% echo $field->label; %>_server_temp_file) && $this-><% echo $field->label; %>_server_temp_file != ''){
        if(isset($this-><% echo $field->label; %>) && $this-><% echo $field->label; %> != ''){
          $this->removeImage<% echo $field->label; %>();
        }
        $paddedIdentifier = str_pad($this->id, 9, '0', STR_PAD_LEFT);
        $d1 = substr($paddedIdentifier, 0, 3);
        $d2 = substr($paddedIdentifier, 3, 3);
        $directory_prefix = dirname(__FILE__).'/../';
        $directory = 'resources/<% echo $this->name; %>/<% echo $field->label; %>/'.$d1.'/'.$d2.'/native/';
        if(!file_exists($directory_prefix.$directory)){
          $tested_dir = $directory_prefix;
          $exploded = explode('/', $directory);
          for($i = 0;$i < (count($exploded) - 1); $i++){
            if(!file_exists($tested_dir.$exploded[$i])){
              mkdir($tested_dir.$exploded[$i], 0777);
            }
            $tested_dir .= $exploded[$i].'/';
          }
        }
        $imageinfos = getimagesize($this-><% echo $field->label; %>_server_temp_file);
        if(is_array($imageinfos) && count($imageinfos)){
          $filename = substr($paddedIdentifier, 6, 3).'_'.substr(md5(time().$this->id), 0, 6).'.';
          switch($imageinfos[2]){
            case IMAGETYPE_JPEG:
              $filename .= 'jpg';
              break;
            case IMAGETYPE_GIF:
              $filename .= 'gif';
              break;
            case IMAGETYPE_PNG:
              $filename .= 'png';
              break;
            default:
              die('wrong image type');
              break;
          }
          move_uploaded_file($this-><% echo $field->label; %>_server_temp_file, $directory_prefix.$directory.$filename);
          $this-><% echo $field->label; %>_server_temp_file = '';
          $this-><% echo $field->label; %> = $filename;
          mysql_query('UPDATE object_<% echo $this->name; %> SET <% echo $field->label; %>="'.$filename.'" WHERE id="'.$this->id.'"') or die('Error while updating image filename.');
        }
      }
  <%
  }
  if($field->type == 'file'){%>
      if(isset($this-><% echo $field->label; %>_delete_flag) && $this-><% echo $field->label; %>_delete_flag === true){
        $this->removeFile<% echo $field->label; %>();
        unset($this-><% echo $field->label; %>);
        mysql_query('UPDATE object_<% echo $this->name; %> SET <% echo $field->label; %>=NULL WHERE id="'.$this->id.'"') or die('Error while updating image filename.');
      }
      if(isset($this-><% echo $field->label; %>_server_temp_file) && $this-><% echo $field->label; %>_server_temp_file != ''){
        if(isset($this-><% echo $field->label; %>) && $this-><% echo $field->label; %> != ''){
          $this->removeFile<% echo $field->label; %>();
        }
        $paddedIdentifier = str_pad($this->id, 9, '0', STR_PAD_LEFT);
        $d1 = substr($paddedIdentifier, 0, 3);
        $d2 = substr($paddedIdentifier, 3, 3);
        $directory_prefix = dirname(__FILE__).'/../';
        $directory = 'resources/<% echo $this->name; %>/<% echo $field->label; %>/'.$d1.'/'.$d2.'/native/';
        $filename = substr($paddedIdentifier, 6, 3).'_'.substr(md5(time().$this->id), 0, 6).'.'.$this-><% echo $field->label; %>_temp_file_extension;
        $filepath = CONSOLE_PATH.$directory.$filename;
        if(!file_exists($directory_prefix.$directory)){
          $tested_dir = $directory_prefix;
          $exploded = explode('/', $directory);
          for($i = 0;$i < (count($exploded) - 1); $i++){
            if(!file_exists($tested_dir.$exploded[$i])){
              mkdir($tested_dir.$exploded[$i], 0777);
            }
            $tested_dir .= $exploded[$i].'/';
          }
        }
        move_uploaded_file($this-><% echo $field->label; %>_server_temp_file, $directory_prefix.$directory.$filename);
        $this-><% echo $field->label; %>_server_temp_file = '';
        $this-><% echo $field->label; %> = $filepath;
        mysql_query('UPDATE object_<% echo $this->name; %> SET <% echo $field->label; %>="'.$filepath.'" WHERE id="'.$this->id.'"') or die('Error while updating image filename.');
      }
  <%
  }
}
%>    
      
      // if the object has some relationNM, need to store the collection of id's which are part of the relation
<%
foreach($this->fieldlist as $field){
  if($field->type == 'relationNM'){
    if(isset($field->options['secondobject']) && $field->options['secondobject']){
%>      $query = 'DELETE FROM object_<% echo $field->label; %>_<% echo $this->name; %>_<% echo $field->options['relationname']; %>_nmrelation '.
             'WHERE id_<% echo $this->name; %>="'.$this->id.'"';
      mysql_query($query) or die('Error while deleting relations N:M in second object.');

      if($this->relationNM<% echo $field->options['relationname']; %> && count($this->relationNM<% echo $field->options['relationname']; %>)){
        foreach($this->relationNM<% echo $field->options['relationname']; %> as $newlink){
          $query = 'INSERT INTO object_<% echo $field->label; %>_<% echo $this->name; %>_<% echo $field->options['relationname']; %>_nmrelation '.
                   '(id_<% echo $field->label; %>, id_<% echo $this->name; %>) '.
                   'VALUES ("'.$newlink.'", "'.$this->id.'")';
          mysql_query($query) or die('Error while inserting relations N:M in second object.');
        }
      }
<%  }
    else{
%>      $query = 'DELETE FROM object_<% echo $this->name; %>_<% echo $field->label; %>_<% echo $field->options['relationname']; %>_nmrelation '.
             'WHERE id_<% echo $this->name; %>="'.$this->id.'"';
      mysql_query($query) or die('Error while deleting relations N:M in first object.');

      if($this->relationNM<% echo $field->options['relationname']; %> && count($this->relationNM<% echo $field->options['relationname']; %>)){
        foreach($this->relationNM<% echo $field->options['relationname']; %> as $newlink){
          $query = 'INSERT INTO object_<% echo $this->name; %>_<% echo $field->label; %>_<% echo $field->options['relationname']; %>_nmrelation '.
                   '(id_<% echo $this->name; %>, id_<% echo $field->label; %>) '.
                   'VALUES ("'.$this->id.'", "'.$newlink.'")';
          mysql_query($query) or die('Error while inserting relations N:M in first object.');
        }
      }
<%  }
  }
}
%>
      mysql_query('COMMIT');

      return true;
    }
    else return false;
  }

<%
foreach($this->fieldlist as $field){
	if($field->type == 'image'){%>	
    /**
     * Delete the images from disk for this object.
     */
	protected function removeImage<% echo $field->label; %>(){
      $paddedIdentifier = str_pad($this->id, 9, '0', STR_PAD_LEFT);
      $d1 = substr($paddedIdentifier, 0, 3);
      $d2 = substr($paddedIdentifier, 3, 3);
      $directory = dirname(__FILE__).'/../resources/<% echo $this->name; %>/<% echo $field->label; %>/'.$d1.'/'.$d2.'/';
  	  if(file_exists($directory)){
        $dir = dir($directory);
        while (false !== ($entry = $dir->read())) {
          if($entry != '.' && $entry != '..'){
            if(file_exists($directory.$entry.'/'.$this-><% echo $field->label; %>)){
              unlink($directory.$entry.'/'.$this-><% echo $field->label; %>);
            }
          }
        }
	  }
	}<%
	}
}%>

<%
foreach($this->fieldlist as $field){
	if($field->type == 'image'){%>	
    /**
     * Get the path of the image, and if it do not exists on disk, resize it to the whished width.
     */
    public function getImage<% echo $field->label; %>Path($width = null){
      $paddedIdentifier = str_pad($this->id, 9, '0', STR_PAD_LEFT);
      $d1 = substr($paddedIdentifier, 0, 3);
      $d2 = substr($paddedIdentifier, 3, 3);
      $directory_prefix = dirname(__FILE__).'/../';
      $basedirectory = 'resources/<% echo $this->name; %>/<% echo $field->label; %>/'.$d1.'/'.$d2.'/';
      if(file_exists($directory_prefix.$basedirectory)){ // first requirement, the directory for the image should exists, otherwise there is a major problem
        $nativedirectory = $directory_prefix.$basedirectory.'native/'; // directory with the original file
        // if the user wants the image in a specific width, and this width satisfies some requirements
        if($width != null && $width > 0){
          $destinationdirectory = $directory_prefix.$basedirectory.$width.'/'; // the directory where the files will go after resize
          if(!file_exists($destinationdirectory)){ // if the destination directory does not exists
            mkdir($destinationdirectory, 0777); // create the directory needed for the new width
          }
          // now destinationdirectory must exist
          if(!file_exists($destinationdirectory.$this-><% echo $field->label; %>)){ // if the image file do not exist
            if(file_exists($nativedirectory.$this-><% echo $field->label; %>)){
              // resize the file from the nativedirectory and save it to destination directory
              $imageinfos = getimagesize($nativedirectory.$this-><% echo $field->label; %>);
              $resource = null;
              $w = $imageinfos[0];
              $h = $imageinfos[1];
              switch($imageinfos[2]){
                case IMAGETYPE_JPEG:
                  $resource = imagecreatefromjpeg($nativedirectory.$this-><% echo $field->label; %>);
                  break;
                case IMAGETYPE_PNG:
                  $resource = imagecreatefrompng($nativedirectory.$this-><% echo $field->label; %>);
                  break;
                case IMAGETYPE_GIF:
                  $resource = imagecreatefromgif($nativedirectory.$this-><% echo $field->label; %>);
                  break;
                default:
                  return '';
                  break;
              }
              $newwidth = $width;
              $newheight = $newwidth * $h / $w;
              if($resource){
                $resizedresource = imagecreatetruecolor($newwidth, $newheight);
                imagealphablending($resizedresource, false);
                $status = imagecopyresampled($resizedresource, $resource, 0, 0, 0, 0, $newwidth, $newheight, $w, $h);
                imagesavealpha($resizedresource, true);
                if($status){
                  switch($imageinfos[2]){
                    case IMAGETYPE_GIF:
                      imagegif($resizedresource, $destinationdirectory.$this-><% echo $field->label; %>);
                      chmod($destinationdirectory.$this-><% echo $field->label; %>, 0664);
                      break;
                    case IMAGETYPE_JPEG:
                      imagejpeg($resizedresource, $destinationdirectory.$this-><% echo $field->label; %>, 95);
                      chmod($destinationdirectory.$this-><% echo $field->label; %>, 0664);
                      break;
                    case IMAGETYPE_PNG:
                      imagepng($resizedresource, $destinationdirectory.$this-><% echo $field->label; %>, 2);
                      chmod($destinationdirectory.$this-><% echo $field->label; %>, 0664);
                      break;
                  }
                } else return '';
              } else return '';
            } else return '';
          }
          // return the image path
          return CONSOLE_PATH.$basedirectory.$width.'/'.$this-><% echo $field->label; %>;
        }
        else{ // $width is not specified or null
          // return the native path
          return CONSOLE_PATH.$basedirectory.'native/'.$this-><% echo $field->label; %>;
        }
      }
    }<%
	}
}%>

<%
foreach($this->fieldlist as $field){
	if($field->type == 'file'){%>	
    /**
     * Delete the images from disk for this object.
     */
	protected function removeFile<% echo $field->label; %>(){
	  if($this-><% echo $field->label; %>){
	    $relativefilepath = str_replace(CONSOLE_PATH, '..', $this-><% echo $field->label; %>);
	    if(file_exists($relativefilepath)){
	      unlink($relativefilepath);
	    }
	  }
	}<%
	}
}%>

  /* Let the user delete any object of the database.
   */
  public function remove(){
    $query = 'DELETE FROM object_<% echo $this->name; %> WHERE id="'.$this->id.'"';
    mysql_query($query) or die('Error while removing an object.');
    
    <%
foreach($this->fieldlist as $field){
	if($field->type == 'image'){%>	
    // delete the images from disk
	$this->removeImage<% echo $field->label; %>();<%
	}
}
foreach($this->fieldlist as $field){
	if($field->type == 'file'){%>	
    // delete the file from disk
    $this->removefile<% echo $field->label; %>();<%
	}
}%>
    unset($this->id); // the object is removed from database but volatile object is not destroyed. if the user call store() afterwards, it will make new insert
  }


  /* Count the number of elements in the table of the object.
   */
  public static function count(){
  	global $querycount;
  	if(! is_numeric($querycount)) $querycount = 0;
  	else $querycount++;
    $query = 'SELECT COUNT(*) FROM object_<% echo $this->name; %>';
    $result = mysql_query($query) or die('Error while counting objects.');
    $line = mysql_fetch_array($result);
    return $line[0];
  }

  /* Return the id list of the elements of the table of the object.
   */
  public static function idList(){
  	global $querycount;
  	if(! is_numeric($querycount)) $querycount = 0;
  	else $querycount++;
    $query = 'SELECT id FROM object_<% echo $this->name; %> ORDER BY id ASC';
    $result = mysql_query($query) or die('Error while selecting id list.');
    $idlist = array();
    while($line = mysql_fetch_array($result)){
      $idlist[] = $line['id'];
    }

    return $idlist;
  }

  /* 
   * General finder. Returns a part of the objects of the database.
   * @param integer $lim The inferior limit of the cut.
   * @param integer $nb The number of object to return starting at $lim position.
   */
  public static function find($lim = null, $nb = null){
  	global $querycount;
  	if(! is_numeric($querycount)) $querycount = 0;
  	else $querycount++;
    $query = 'SELECT * FROM object_<% echo $this->name; %> ORDER BY id DESC'.($lim !== null && $nb !== null ? ' LIMIT '.$lim.', '.$nb : '');
    $result = mysql_query($query) or die('Error while loading objects.');
    $objectlist = array();
    while($row = mysql_fetch_array($result)){<%
foreach($this->fieldlist as $field){
	if($field->type == 'password'){%>
	  $row['<% echo $field->label; %>_hashed'] = $row['<% echo $field->label; %>'];
	  unset($row['<% echo $field->label; %>']);<%
	}
	if($field->type == 'datetime'){%>
	  if(isset($row['<% echo $field->label; %>']) && $row['<% echo $field->label; %>'] != '' && strlen($row['<% echo $field->label; %>']) == 19){
	    $row['<% echo $field->label; %>date'] = substr($row['<% echo $field->label; %>'], 0, 10);
	    $row['<% echo $field->label; %>hour'] = substr($row['<% echo $field->label; %>'], 11, 2);
	    $row['<% echo $field->label; %>mins'] = substr($row['<% echo $field->label; %>'], 14, 2);
	  }<%
	}
}%>
      // create the object with the database values
      $object = new <% echo $this->name; %>($row);
      // set the relations<%
foreach($this->fieldlist as $field){
  if($field->type == 'relation1N'){%>
      $object->relation1N<% echo $field->options['relationname']; %> = $row['1n_rel_<% echo $field->options['relationname']; %>'];<%
  }
}%>
      $object->id = $row['id'];
      array_push($objectlist, $object);
    }

    return $objectlist;
  }

  /* Finder for the primary id
   * @param integer id the identifier of the object to return
   */
    public static function findByPrimaryId($id){
    if(!is_numeric($id) || $id <= 0) return null;
  	if(isset(self::$objects_<% echo $this->name; %>[$id])){
      return self::$objects_<% echo $this->name; %>[$id];
  	}
    else {
      global $querycount;
      if(! is_numeric($querycount)) $querycount = 0;
      else $querycount++;
      $query = 'SELECT * FROM object_<% echo $this->name; %> WHERE id="'.addslashes($id).'"';
      $result = mysql_query($query) or die('Error while selecting objects.');
      if($row = mysql_fetch_array($result)){<%
foreach($this->fieldlist as $field){
	if($field->type == 'password'){%>
	    $row['<% echo $field->label; %>_hashed'] = $row['<% echo $field->label; %>'];
	    unset($row['<% echo $field->label; %>']);<%
	}
	if($field->type == 'datetime'){%>
	    if(isset($row['<% echo $field->label; %>']) && $row['<% echo $field->label; %>'] != '' && strlen($row['<% echo $field->label; %>']) == 19){
	      $row['<% echo $field->label; %>date'] = substr($row['<% echo $field->label; %>'], 0, 10);
	      $row['<% echo $field->label; %>hour'] = substr($row['<% echo $field->label; %>'], 11, 2);
	      $row['<% echo $field->label; %>mins'] = substr($row['<% echo $field->label; %>'], 14, 2);
	    }<%
	}
}%>
        $object = new <% echo $this->name; %>($row);
        // set the relations<%
foreach($this->fieldlist as $field){
  if($field->type == 'relation1N'){%>
        $object->relation1N<% echo $field->options['relationname']; %> = $row['1n_rel_<% echo $field->options['relationname']; %>'];<%
  }
}%>
        $object->id = $row['id'];
        self::$objects_<% echo $this->name; %>[$id] = $object;
        return $object;
      }
      else{
        return false;
      }
    }
  }

<% 
$needrelation1Nfilter = false;
foreach($this->fieldlist as $field){
  if($field->type == 'relation1N'){
    $needrelation1Nfilter = true;
  }
}
if($needrelation1Nfilter){%>
  /* Count the objects with the filter.
   * @param table $valuelist A table containing the filters to apply on the selection query. This table should be of the form : array('relationname' => 'value'), where 'relationname' is the name of the relation on which to apply the filter.
   */
  public static function countByRelation1N($valuelist){
  	global $querycount;
  	if(! is_numeric($querycount)) $querycount = 0;
  	else $querycount++;
    $selectfilter = ' 1 ';
    foreach($valuelist as $key => $value){
      $selectfilter .= ' AND 1n_rel_'.$key.'="'.$value.'" ';
    }
    $query = 'SELECT COUNT(*) FROM object_<% echo $this->name; %> WHERE '.$selectfilter.' ORDER BY id DESC';
    $result = mysql_query($query) or die('Error while counting objects with relation 1:N filter.');
    $line = mysql_fetch_array($result);
    return $line[0];
  }
  
  /* Filter the objects by the relation1N values.
   * @param table $valuelist A table containing the filters to apply on the selection query. This table should be of the form : array('relationname' => 'value'), where 'relationname' is the name of the relation on which to apply the filter.
   */
  public static function findByRelation1N($valuelist, $lim = null, $nb = null){
  	global $querycount;
  	if(! is_numeric($querycount)) $querycount = 0;
  	else $querycount++;
    $selectfilter = ' 1 ';
    foreach($valuelist as $key => $value){
      $selectfilter .= ' AND 1n_rel_'.$key.'="'.$value.'" ';
    }
    $query = 'SELECT * FROM object_<% echo $this->name; %> WHERE '.$selectfilter.' ORDER BY id DESC'.($lim !== null && $nb !== null ? ' LIMIT '.$lim.', '.$nb : '');
    $result = mysql_query($query) or die('Error while selecting objects.');
    $objectlist = array();
    while($row = mysql_fetch_array($result)){<%
foreach($this->fieldlist as $field){
	if($field->type == 'password'){%>
	  $row['<% echo $field->label; %>_hashed'] = $row['<% echo $field->label; %>'];
	  unset($row['<% echo $field->label; %>']);<%
	}
	if($field->type == 'datetime'){%>
	  if(isset($row['<% echo $field->label; %>']) && $row['<% echo $field->label; %>'] != '' && strlen($row['<% echo $field->label; %>']) == 19){
	    $row['<% echo $field->label; %>date'] = substr($row['<% echo $field->label; %>'], 0, 10);
	    $row['<% echo $field->label; %>hour'] = substr($row['<% echo $field->label; %>'], 11, 2);
	    $row['<% echo $field->label; %>mins'] = substr($row['<% echo $field->label; %>'], 14, 2);
	  }<%
	}
}%>
      // create the object with the database values
      $object = new <% echo $this->name; %>($row);
      // set the relations<%
foreach($this->fieldlist as $field){
  if($field->type == 'relation1N'){%>
      $object->relation1N<% echo $field->options['relationname']; %> = $row['1n_rel_<% echo $field->options['relationname']; %>'];<%
  }
}%>
      $object->id = $row['id'];
      array_push($objectlist, $object);
    }

    return $objectlist;
  }
<%
}
%>

<% foreach($this->fieldlist as $field){
  if($field->type == 'finder'){
%>  /* User defined finder.
   */
  public static function finder<% echo $field->label; %>(<% 
$first = true;
foreach($field->options['finderparameters'] as $param){
  if(!$first){
    echo ', $'.$param;
  }
  else{
    $first = false;
    echo '$'.$param;
  }
}
%>){<%
$userquery = $field->options['finderquery'];
foreach($field->options['finderparameters'] as $param){
  $userquery = str_replace($param, '"\'.addslashes($'.$param.').\'"', $userquery);
}
%>
    global $querycount;
  	if(! is_numeric($querycount)) $querycount = 0;
  	else $querycount++;
    $query = '<% echo $userquery; %>';
    $result = mysql_query($query) or die('Error while selecting objects.');

    $objectlist = array();
    while($row = mysql_fetch_array($result)){<%
foreach($this->fieldlist as $field){
	if($field->type == 'password'){%>
	  $row['<% echo $field->label; %>_hashed'] = $row['<% echo $field->label; %>'];
	  unset($row['<% echo $field->label; %>']);<%
	}
	if($field->type == 'datetime'){%>
	  if(isset($row['<% echo $field->label; %>']) && $row['<% echo $field->label; %>'] != '' && strlen($row['<% echo $field->label; %>']) == 19){
	    $row['<% echo $field->label; %>date'] = substr($row['<% echo $field->label; %>'], 0, 10);
	    $row['<% echo $field->label; %>hour'] = substr($row['<% echo $field->label; %>'], 11, 2);
	    $row['<% echo $field->label; %>mins'] = substr($row['<% echo $field->label; %>'], 14, 2);
	  }<%
	}
}%>
      // create the object with the database values
      $object = new <% echo $this->name; %>($row);
      // set the relations<%
foreach($this->fieldlist as $field){
  if($field->type == 'relation1N'){%>
      $object->relation1N<% echo $field->options['relationname']; %> = $row['1n_rel_<% echo $field->options['relationname']; %>'];<%
  }
}%>
      $object->id = $row['id'];
      array_push($objectlist, $object);
    }

    return $objectlist;
  }
<%
  }
}
%>

<% foreach($this->fieldlist as $field){
  if($field->type == 'updater'){
%>  /* User defined finder.
   */
  public static function updater<% echo $field->label; %>(<% 
$first = true;
foreach($field->options['finderparameters'] as $param){
  if(!$first){
    echo ', $'.$param;
  }
  else{
    $first = false;
    echo '$'.$param;
  }
}
%>){<%
$userquery = $field->options['finderquery'];
foreach($field->options['finderparameters'] as $param){
  $userquery = str_replace($param, '"\'.$'.$param.'.\'"', $userquery);
}
%>
    $query = '<% echo $userquery; %>';
    $result = mysql_query($query) or die('Error while updating objects.');
  }<%
  }
}
%>
  /* Display a form to fill all the fields of the object.
   * @param string $submittext The text of the submit button.
   * @param <% echo $this->name; %> $posted If the form should contains some posted values, an object of the right class can be passed as argument.
   * @param string $action If the form should not post the values on the same URL ($_SERVER['PHP_SELF']), $action can be specified as a GET URL.
   * @return string The HTML code of the form.
   */
  public static function getForm(<% echo $this->name; %> $postedobject=null, $action=null){ <%
// find if there is any image field
$mime = false;
foreach($this->fieldlist as $field){
  if($field->type == 'image' || $field->type == 'file'){
    $mime = true;
  }
}
%>
    $ret = '<form class="easydevform marginleft" name="<% echo $this->name;%>form" action="'.($action == null ? $_SERVER['PHP_SELF'] : $action).'" method="post" <% if($mime == true) echo 'enctype="multipart/form-data"'; %>>'."\n";
    $ret .= '<table>'."\n";<%
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'integer':
  case 'string':
  case 'double': %>
    $ret .= '  <tr>'."\n";
    $ret .= '    <td><% echo $field->label;%> : </td>'."\n".
            '    <td><input type="text" name="<% echo $field->label;%>" '.($postedobject != null ? 'value="'.htmlentities($postedobject-><% echo $field->label;%>, ENT_COMPAT, 'UTF-8').'"' : '').'/>'."\n";
    $ret .= '  </tr>'."\n";<%
    break;
  case 'password': %>
    $ret .= '  <tr>'."\n";
    $ret .= '    <td><% echo $field->label;%> : </td>'."\n".
            '    <td><input type="password" name="<% echo $field->label;%>" />'."\n";
    $ret .= '  </tr>'."\n";
    $ret .= '  <tr>'."\n";
    $ret .= '    <td>'.Translator::translate('password_confirmation').' : </td>'."\n".
            '    <td><input type="password" name="<% echo $field->label;%>_confirmation" />'."\n";
    $ret .= '  </tr>'."\n";<%
    break;
  case 'text': %>
    $ret .= '  <tr>'."\n";
    $ret .= '    <td><% echo $field->label;%> : </td>'."\n".
            '    <td><textarea name="<% echo $field->label;%>">'.($postedobject != null ? htmlentities($postedobject-><% echo $field->label;%>, ENT_COMPAT, 'UTF-8') : '').'</textarea>'."\n";
    $ret .= '  </tr>'."\n";<%
    break;
  case 'bool': %>
    $ret .= '  <tr>'."\n";
    $ret .= '    <td><% echo $field->label;%> : </td>'."\n".
            '    <td><select name="<% echo $field->label; %>">'."\n".
            '      <option value=""></option>'."\n".
            '      <option value="1" '.($postedobject != null && $postedobject-><% echo $field->label; %> == '1' ? 'selected' : '').'>'.Translator::translate('true').'</option>'."\n".
            '      <option value="0" '.($postedobject != null && $postedobject-><% echo $field->label; %> == '0' ? 'selected' : '').'>'.Translator::translate('false').'</option>'."\n".
            '    </td>'."\n";
    $ret .= '  </tr>'."\n";<%
    break;
  case 'image': %>
    $ret .= '  <tr>'."\n";
    $ret .= '    <td><% echo $field->label;%> : </td>'."\n".<%
    if(isset($field->options['nullable']) && $field->options['nullable']){%>
            '    <td>'.($postedobject != null && $postedobject->id && $postedobject-><% echo $field->label; %> ? '<img src="'.$postedobject->getImage<% echo $field->label;%>Path(50).'" /><br /><input type="checkbox" name="<% echo $field->label; %>_delete_flag" value="1" /> '.Translator::translate('delete_image').'<br />' : '').'<input type="file" name="<% echo $field->label;%>">'."\n";<%
    }else{ %>
            '    <td>'.($postedobject != null && $postedobject->id && $postedobject-><% echo $field->label; %> ? '<img src="'.$postedobject->getImage<% echo $field->label;%>Path(50).'" /><br />' : '').'<input type="file" name="<% echo $field->label;%>">'."\n";<%
    }%>
    $ret .= '  </tr>'."\n";<%
    break;
  case 'file': %>
    $ret .= '  <tr>'."\n";
    $ret .= '    <td><% echo $field->label;%> : </td>'."\n".<%
    if(isset($field->options['nullable']) && $field->options['nullable']){%>
            '    <td>'.($postedobject != null && $postedobject->id && $postedobject-><% echo $field->label; %> ? '<a class="default" href="'.$postedobject-><% echo $field->label; %>.'">'.Translator::translate('download_file').'</a><br /><input type="checkbox" name="<% echo $field->label; %>_delete_flag" value="1" /> '.Translator::translate('delete_file').'<br />' : '').'<input type="file" name="<% echo $field->label;%>">'."\n";<%
    }else{ %>
            '    <td>'.($postedobject != null && $postedobject->id && $postedobject-><% echo $field->label; %> ? '<a class="default" href="'.$postedobject-><% echo $field->label; %>.'">'.Translator::translate('download_file').'</a><br />' : '').'<input type="file" name="<% echo $field->label;%>">'."\n";<%
    }%>
    $ret .= '  </tr>'."\n";<%
    break;
  case 'date': %>
    $ret .= '  <tr>'."\n";
    $ret .= '    <td><% echo $field->label;%> : </td>'."\n".
            '    <td><input type="text" name="<% echo $field->label;%>" '.($postedobject != null ? 'value="'.$postedobject-><% echo $field->label;%>.'"' : '').'/>'."\n".
            '    <script language="JavaScript" type="text/javascript">'."\n".
            '    <!-- '."\n".
            '    function dynFunc<% echo $field->label;%>(date, month, year) {'."\n".
            '      if (document.<% echo $this->name;%>form.<% echo $field->label;%>.disabled == false) {'."\n".
            '        document.<% echo $this->name;%>form.<% echo $field->label;%>.value = year + "-" + subrstr("00" + month, 2) + "-" + subrstr("00" + date, 2);'."\n".
	        '      }'."\n".
            '    }'."\n".
            '    dynVar<% echo $field->label;%> = new dynCalendar("dynVar<% echo $field->label;%>", "dynFunc<% echo $field->label;%>", "'.CONSOLE_PATH.'");'."\n".
            '    dynVar<% echo $field->label;%>.setOffset(20, 10);'."\n".
            '    //-->'."\n".
            '    </script><div style="visibility: hidden;" class="dynCalendar" id="dynCalendar_layer_1" onmouseover="dynVar<% echo $field->label;%>._mouseover(true)" onmouseout="dynVar<% echo $field->label;%>._mouseover(false)"></div>'."\n".
            '    <noscript><span><i>(yyyy-mm-dd)</i></span></noscript>'."\n".
            '    </td>'."\n";
    $ret .= '  </tr>'."\n";<%
    break;
  case 'datetime': %>
    $ret .= '  <tr>'."\n";
    $ret .= '    <td><% echo $field->label;%> : </td>'."\n".
            '    <td><input type="text" name="<% echo $field->label;%>date" '.($postedobject != null ? 'value="'.$postedobject-><% echo $field->label;%>date : '').'"/>'."\n".
            '    <script language="JavaScript" type="text/javascript">'."\n".
            '    <!-- '."\n".
            '    function dynFunc<% echo $field->label;%>(date, month, year) {'."\n".
            '      if (document.<% echo $this->name;%>form.<% echo $field->label;%>date.disabled == false) {'."\n".
            '        document.<% echo $this->name;%>form.<% echo $field->label;%>date.value = year + "-" + subrstr("00" + month, 2) + "-" + subrstr("00" + date, 2);'."\n".
	        '      }'."\n".
            '    }'."\n".
            '    dynVar<% echo $field->label;%> = new dynCalendar("dynVar<% echo $field->label;%>", "dynFunc<% echo $field->label;%>", "'.CONSOLE_PATH.'");'."\n".
            '    dynVar<% echo $field->label;%>.setOffset(20, 10);'."\n".
            '    //-->'."\n".
            '    </script><div style="visibility: hidden;" class="dynCalendar" id="dynCalendar_layer_1" onmouseover="dynVar<% echo $field->label;%>._mouseover(true)" onmouseout="dynVar<% echo $field->label;%>._mouseover(false)"></div>'."\n".
            '    <noscript><span><i>(yyyy-mm-dd)</i></span></noscript>'."\n".
            '    <select class="datetime" name="<% echo $field->label;%>hour">'."\n".
            '       <option value=""></option>'."\n";
    for($i = 0; $i <= 24; $i++){
      $ret .= '      <option value="'.($i < 10 ? '0'.$i : $i).'"'.($postedobject != null && $postedobject-><% echo $field->label; %>hour === ($i < 10 ? '0'.$i : ''.$i) ? ' selected="selected"' : '').'>'.$i.'</option>'."\n";
    }
    $ret .= '    </select> h '."\n".
            '    <select class="datetime" name="<% echo $field->label;%>mins">'."\n".
            '       <option value=""></option>'."\n";
    for($i = 0; $i <= 60; $i++){
      $ret .= '      <option value="'.($i < 10 ? '0'.$i : $i).'"'.($postedobject != null && $postedobject-><% echo $field->label; %>mins === ($i < 10 ? '0'.$i : ''.$i) ? ' selected="selected"' : '').'>'.$i.'</option>'."\n";
    }
    $ret .= '    </select>'."\n".
            '    </td>'."\n".
            '  </tr>'."\n".
            '  <tr valign="top">'."\n".
            '    <td></td><td><input type="checkbox" name="<% echo $field->label;%>now" value="now" '.(!$postedobject ? 'checked="checked"' : '').' /> CURRENT TIME</td>'."\n";
    $ret .= '  </tr>'."\n";<%
    break;
  case 'relation1N': 
$textfields = array();
$dbobject = null;
foreach($foreignobjectlist as $foreignobject){
	if($foreignobject->name == $field->label) $dbobject = $foreignobject;
}
foreach($dbobject->fieldlist as $f){
  switch($f->type){
  	case 'string':
  	case 'integer':
  	case 'double':
  	case 'date':
  	case 'datetime':
  		$textfields[] = $f->label;
  		break;
  }
}
	
	// now we have in $textfields all the fields that can be represented as text in a select list
%>
    $ret .= '  <tr>'."\n";
    $ret .= '    <td><% echo $field->options['relationname']; %> : </td>';    
    $ret .= '    <td><select class="selectinput" name="<% echo $field->options['relationname']; %>">'."\n";<%
if(isset($field->options['nullable']) && $field->options['nullable']){%>
    $ret .= '        <option value=""></option>'."\n";<%
}%>
    
    // create the options of the select list
    $relatedobjectlist = <% echo $field->label; %>::find();
    
    foreach($relatedobjectlist as $object){
      $ret .= '      <option value="'.$object->id.'"'.($postedobject != null && $postedobject->relation1N<% echo $field->options['relationname']; %> == $object->id ? ' selected="selected"' : '').'>';
<%
$first = true;
foreach($textfields as $textfield){
  if(!$first){%>
      $ret .= ' - ';<%
  }
  $first = false;%>
      $ret .=  $object-><% echo $textfield; %>;<%
}%>
      $ret .= '</option>'."\n";
    }

    $ret .= '    </select></td>'."\n";
    $ret .= '  </tr>'."\n";<%
    break;
  default:
    break;
  }
}
%>
    $ret .= '  <tr>'."\n".
            '    <td></td>'."\n".
            '    <td><input type="submit" name="formsubmit" value="'.(isset($_GET['objectid']) ? Translator::translate('generator_modify_page_submit_button') : Translator::translate('generator_add_page_submit_button')).'" /></td>'."\n".
            '  </tr>'."\n".
            '</table>'."\n".
            '</form>'."\n";

    return $ret;
  }

  /*
   * Verify that the file sent exists and initialize the temporary path and extension for the file.
   * @param string $name The name of the sent file.
   */
  protected function verifyFileFromForm($name){
    if(isset($_FILES[$name]) && $_FILES[$name]['error'] == 0){
    	$pointpos = strrpos($_FILES[$name]['name'], '.');
    	$lastpos = strlen($_FILES[$name]['name']) - 1;
    	if($pointpos === false || $pointpos == $lastpos) $this->errors[] = Translator::translate('generator_add_object_file_no_extension').$file;
    	else{
    		$temp_extension_var = $name.'_temp_file_extension';
	    	$this->$temp_extension_var = substr($_FILES[$name]['name'], $pointpos +1, $lastpos - $pointpos);
	    	$temp_server_var = $name.'_server_temp_file';
	    	$this->$temp_server_var = $_FILES[$name]['tmp_name'];
    	}
    }
    else{
    	if(isset($_FILES[$name])){
  			switch($_FILES[$name]['error']){
  				case UPLOAD_ERR_INI_SIZE:
  					$this->errors[] = Translator::translate('generator_add_object_file_too_large_file').$name;
  					break;
  				case UPLOAD_ERR_FORM_SIZE:
  					$this->errors[] = Translator::translate('generator_add_object_file_html_too_large_file').$name;
  					break;
  				case UPLOAD_ERR_PARTIAL:
  					$this->errors[] = Translator::translate('generator_add_object_file_partial_file').$name;
  					break;
  				case UPLOAD_ERR_NO_FILE:
  					$this->errors[] = Translator::translate('generator_add_object_file_no_file').$name;
  					break;
  				case UPLOAD_ERR_NO_TMP_DIR:
  					$this->errors[] = Translator::translate('generator_add_object_file_no_tmp_dir').$name;
  					break;
  				case UPLOAD_ERR_CANT_WRITE:
  					$this->errors[] = Translator::translate('generator_add_object_file_no_tmp_dir').$name;
  					break;
  				case UPLOAD_ERR_EXTENSION:
  					$this->errors[] = Translator::translate('generator_add_object_file_extention').$name;
  					break;
  				default:
  					$this->errors[] = Translator::translate('generator_add_object_file_unknown_err').$name;
  					break;
  			}
  		}
  		else{
  			$this->errors[] = Translator::translate('generator_add_object_file_no_such_file').$name;
  		}
    }
  }
  
  /* Verify that the file sent exists, that it is really an image, and initialize the temporary path of the file.
   * @param string $name The name of the sent file.
   */
  protected function verifyImageFromForm($name){
  	if(isset($_FILES[$name]) && $_FILES[$name]['error'] == 0){
  		$imageinfos = getimagesize($_FILES[$name]['tmp_name']);
  		if(is_array($imageinfos) && count($imageinfos)){
  			$imagetype = $imageinfos[2];
  			if($imagetype[0] > MAX_IMAGE_WIDTH) $this->errors[] = Translator::translate('generator_add_object_image_too_width').$name;
  			if($imagetype[1] > MAX_IMAGE_HEIGTH) $this->errors[] = Translator::translate('generator_add_object_image_too_height').$name;
  			switch($imagetype){
  				case IMAGETYPE_GIF:
  				case IMAGETYPE_JPEG:
  				case IMAGETYPE_PNG:
  					$temp_server_var = $name.'_server_temp_file';
  					$this->$temp_server_var = $_FILES[$name]['tmp_name'];
  					break;
  				default:
  					$this->errors[] = Translator::translate('generator_add_object_image_bad_type').$name;
  					break;
  			}
  		}
  		else{
  			$this->errors[] = Translator::translate('generator_add_object_image_format_error').$name;
  		}
  	}
  	else{
  		if(isset($_FILES[$name])){
  			switch($_FILES[$name]['error']){
  				case UPLOAD_ERR_INI_SIZE:
  					$this->errors[] = Translator::translate('generator_add_object_image_too_large_file').$name;
  					break;
  				case UPLOAD_ERR_FORM_SIZE:
  					$this->errors[] = Translator::translate('generator_add_object_image_html_too_large_file').$name;
  					break;
  				case UPLOAD_ERR_PARTIAL:
  					$this->errors[] = Translator::translate('generator_add_object_image_partial_file').$name;
  					break;
  				case UPLOAD_ERR_NO_FILE:
  					$this->errors[] = Translator::translate('generator_add_object_image_no_file').$name;
  					break;
  				case UPLOAD_ERR_NO_TMP_DIR:
  					$this->errors[] = Translator::translate('generator_add_object_image_no_tmp_dir').$name;
  					break;
  				case UPLOAD_ERR_CANT_WRITE:
  					$this->errors[] = Translator::translate('generator_add_object_image_no_tmp_dir').$name;
  					break;
  				case UPLOAD_ERR_EXTENSION:
  					$this->errors[] = Translator::translate('generator_add_object_image_extention').$name;
  					break;
  				default:
  					$this->errors[] = Translator::translate('generator_add_object_image_unknown_err').$name;
  					break;
  			}
  		}
  		else{
  			$this->errors[] = Translator::translate('generator_add_object_image_no_such_file').$name;
  		}
  	}
  }
}
?>
