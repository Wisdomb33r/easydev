<?php
/*********************************************************************************
 * Autogenerated script
 * EasyDev v.0.x copyright Patrick Mingard 2007
 * Any modification of this code can alter the behaviour of EasyDev v.0.x console 
 ********************************************************************************/

// require the includes
require_once('includes.php'); 

// first set a variable to indicate to which "mainmenu" this script belongs to in the administration console.
$adminMainMenu = <% echo $mainmenuid; %>;
 
// verify that the logged user has right to see this page
if(! $session_permissions[$adminMainMenu]){ // the user should not see this page because he do not has rights
  header('Location: main.php');
  exit;
}

if($_SERVER[REQUEST_METHOD] == 'POST'){ // if server method request == POST
  $errors = array(); // to remember all the form errors
 
  // -------------- first verify the type of the sent objects ------------------;
<%
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'string': %>
  // <% echo $field->label; %> verification;
<%
    break;
  case 'integer': %>
  // <% echo $field->label; %> verification (is it really an integer)
  $regexpresult = preg_match('/^[\-]?[0-9]+$/', $_POST['<% echo $field->label; %>']);
  if($regexpresult == 0 || $regexpresult == false)
    array_push($errors, $translator->translate('generator_add_object_expected_integer').'<% echo $field->label; %>');
<%
    break;
  case 'date':
    break;
  case 'relationNM':
    // NM relations do not have any code to produce here, separated script
    break;
  case 'relation1N':
    break;
  case 'bool': %>
  // <% echo $field->label; %> verification
  if($_POST['<% echo $field->label; %>'] != 'true' && $_POST['<% echo $field->label; %>'] != 'false')
    array_push($errors, $translator->translate('generator_add_object_boolean_unset').'<% echo $field->label; %>');
<%
    break;
  case 'double': %>
  // <% echo $field->label; %> verification (is it really a double)
  $regexpresult = preg_match('/^[\-]?[0-9]+([\.][0-9]+)?$/', $_POST['<% echo $field->label; %>']);
  if($regexpresult == 0 || $regexpresult == false)
    array_push($errors, $translator->translate('generator_add_object_expected_double').'<% echo $field->label; %>');
<%
    break;
  case 'finder':
    break;
  case 'updater':
    break;
  default:
    // should never happens, this switch statement catch for the whole script all the fields that have an unknown type
    die('Default statement in htmlAdderGenerator() encountered.');
    break;
  }
 } %>
	  
  if(count($errors) == 0){ // case there is no errors in the generated script
    // no errors in data type has been found, store data in database
    $query = '';
    if(isset($_GET['objectid'])){ // we want to modify an object, need to generate an UPDATE query
      $query = 'UPDATE object_<% echo $this->name; %> SET <%
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'double':
  case 'string':
  case 'integer':
  case 'bool': 
    if(!$first){
      echo ', ';
    }
    $first = false;
    %><% echo $field->label;%>="'.$_POST['<% echo $field->label; %>'].'"<%
    break;
  case 'relation1N':
    if(!$first){
      echo ', ';
    }
    $first = false;
    %><% echo '1n_rel_'.$field->options['relationname']; %>="'.$_POST['<% echo $field->options['relationname']; %>'].'"<%
    break;
  }
}%> WHERE id="'.$_GET['objectid'].'"';
    }
    else{ // we want to insert a new object, need to generate an INSERT query
      $query = 'INSERT INTO object_<% echo $this->name; %> (<%

// START ---- list all fields for the INSERT query
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'double':
  case 'string':
  case 'integer':
  case 'bool': 
    if(!$first){
      echo ', ';
    }
    $first = false;
    echo $field->label;
    break;
  case 'relation1N': // only if the type is a relation1N, need to select the relationname
    if(!first){
      echo ', ';
    }
    $first = false;
    echo '1n_rel_'.$field->options['relationname'];
    break;
  }
} 

// END ---- list all fields for the INSERT query
 %>) VALUES ("<%

// START ---- list all the values for the INSERT query
$first = true;
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'double':
  case 'string':
  case 'integer': 
    if(!$first){
      echo '", "';
    }
    $first = false;
    %>'.$_POST['<% echo $field->label; %>'].'<%
    break;
  case 'relation1N': 
    if(!first){
      echo '", "';
    }
    $first = false;
    %>'.$_POST['<% echo $field->options['relationname']; %>'].'<%
    break;
  case 'bool': 
    if(!first){
      echo '", "';
    }
    $first = false;
    %>'.($_POST['<% echo $field->label; %>'] == 'true' ? '1' : '0').'<%
    break;
  }
} 
// END ---- list all the values for the INSERT query

%>")';

    }
    $result = mysql_query($query) or die('Error while inserting new object.<br />'.$query);
    
    // redirect on the same page but with a message for indicating that the entry was done successfully
    header('Location: '.(isset($_GET['objectid']) ? 'objectdelete_<% echo $this->name; %>.php' : $_SERVER['PHP_SELF']).'?'.CURRENTMENU.'='.$_GET[CURRENTMENU].'&action='.(isset($_GET['objectid']) ? 'confirmmodify' : 'confirminsert'));
    exit;
  }
  else{ // there is some errors // case there is some errors in the generated script
    $_SESSION[SESSION_ERRORS] = $errors;
    $_SESSION[SESSION_POSTED] = $_POST;
    header('Location: '.$_SERVER['PHP_SELF'].'?'.CURRENTMENU.'='.$_GET[CURRENTMENU]);
    exit;
  }
}
else{ // GET request method // if server method request == GET
  // includes the header of the page
  include 'adminheader.php';
  
  // if $_GET['action'] is set and is equal to "confirminsert", print a message
  if(isset($_GET['action']) && $_GET['action'] == 'confirminsert'){
    echo '<p><strong>'.$translator->translate('generator_confirm_insert').'</strong></p>';
  }
  
  // initialize all the variables to restore if there is some post data;
<%
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'double':
  case 'string':
  case 'bool':
  case 'integer': %>
  $<% echo $field->label; %> = '';<%
	break;
  case 'relationNM':
	// nothing to do
	break;
  case 'relation1N': %>
  $id_<% echo $field->label; %> = '';<%
    break;
  case 'date':
	break;
  }
}%>
  // verify if there is a $_GET['objectid'] set. if there is one, the script is called to modify an existing object, otherwise to create a new one
  if(isset($_GET['objectid'])){
    $query = 'SELECT * FROM object_<% echo $this->name; %> WHERE id="'.$_GET['objectid'].'"';
    $result = mysql_query($query) or die('Error while selecting object for update.<br />'.$query);
    if($line = mysql_fetch_array($result)){
<%foreach($this->fieldlist as $field){
  switch($field->type){
  case 'double':
  case 'string':
  case 'bool':
  case 'integer':%>
      $<% echo $field->label; %> = $line['<% echo $field->label; %>'];<%
    break;
  case 'relationNM':
    // nothing to do
  case 'relation1N': %>
      $<% echo $field->options['relationname']; %> = $line['1n_rel_<% echo $field->options['relationname']; %>'];<%
    break;
  }
}%>
        
    }
    else{ // the object passed as parameter does not exist, redirect on the same script for a standard insert
      header('Location: '.$_SERVER['PHP_SELF'].'?'.CURRENTMENU.'='.$_GET[CURRENTMENU]);
      exit;
    }
  }

  // Verify if there is some errors and posted values.
  if(isset($_SESSION[SESSION_ERRORS]) && isset($_SESSION[SESSION_POSTED])){
    
    $errors = $_SESSION[SESSION_ERRORS];
    $posted = $_SESSION[SESSION_POSTED];
    
    // print the errors
    echo '<ul class="errors">';
    foreach ($errors as $error){
      echo '<li class="errors">'.$error."</li>\n";
    }
    echo "</ul>\n";
    
    // restore the values of the form
<%
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'string':
  case 'double':
  case 'integer':
  case 'bool': %>
    $<% echo $field->label; %> = $posted['<% echo $field->label; %>'];<%
   	break;
  case 'relationNM':
	// nothing to do
	break;
  case 'relation1N': %>
    $<% echo $field->options['relationname']; %> = $posted['<% echo $field->options['relationname']; %>'];<%
   	break;
  case 'date':
	break;
  }
}%>

    // do not forget to remove these two variables
    unset($_SESSION[SESSION_ERRORS]);
    unset($_SESSION[SESSION_POSTED]);
  }
  
  echo '<form action="'.$_SERVER['PHP_SELF'].'?'.CURRENTMENU.'='.$_GET[CURRENTMENU].(isset($_GET['objectid']) ? '&objectid='.$_GET['objectid'] : '').'" method="post">'."\n";
  echo '<table class="form">'."\n";

  // depending on the type of the field, create an appropriate input for the "add" page.
  // for some type of fields, it is just a text field while for relations we need to construct a select list with the elements of the table of the link
  ?>
<%
foreach($this->fieldlist as $field){
  switch($field->type){
  case 'double':
  case 'string':
  case 'integer': %>
  <tr>
    <td><% echo $field->label; %> : </td>
    <td><input class="textinput" type="text" name="<% echo $field->label; %>"<?php echo ($<% echo $field->label; %> != '' ? ' value="'.$<% echo $field->label; %>.'"' : '' ); ?> /></td>
  </tr>
<%
    break;
  case 'date':
	break;
  case 'relationNM':
	// nothing to do
	break;
  case 'relation1N':
	// find the labels which can be displayed as text from the table it is linked to
	$query = 'DESCRIBE object_'.$field->label;
	$result = mysql_query($query) or die('Error while getting table description.<br />'.$query);
	
	$textfields = array(); // the fields of the database which can be diplayed as text. 
	// this list will be used later to print a select list, so ids and other relations should not be taken into account.
	while($line = mysql_fetch_array($result)){
	  $triplet = substr($line['Type'], 0, 3);
	  switch($triplet){
	  case 'int':
	  case 'tin':
	  case 'tex':
	  case 'dou':
		// if the type of the field is int, tinyint, text or double, it can be printed as text
		if($line['Field'] != 'id' && substr($line['Field'], 0, 3) != 'id_'){// remove the primary key and relations
		  array_push($textfields, $line['Field']);
		}
		break;
	  default:
		break;
	  }
	}
	
	// now we have in $textfields all the fields that can be represented as text in a select list
%>
  <tr>
    <td><% echo $field->options['relationname']; %> : </td>
    <?php
    // we can make the select list
    $query = 'SELECT * FROM object_<% echo $field->label; %> ORDER BY id';
    $result = mysql_query($query) or die('Error while selecting object list.<br />'.$query);
    ?>
    <td><select class="selectinput" name="<% echo $field->options['relationname']; %>">
  <?php
  while($line = mysql_fetch_array($result)){
	echo '        <option value="'.$line['id'].'"'.($<% echo $field->options['relationname']; %> != '' && $<% echo $field->options['relationname']; %> == $line['id'] ? ' selected' : '').'>'.$line['id'].' ';
<%
foreach($textfields as $textfield){
%>    echo ' - '.$line[<% echo $textfield; %>];<%
}%>
    echo '</option>'."\n";
  }
  ?>
      </select>
    </td>
  </tr>
<%
  break;
  case 'bool': %>
  <tr>
    <td><% echo $field->label; %> : </td>
    <td><select class="selectinput" name="<% echo $field->label; %>">
            <option value=""></option>';
            <option value="true"<?php echo ($<% echo $field->label; %> != '' && $<% echo $field->label; %> == 'true' ? ' selected' : ''); ?>>true</option>
            <option value="false"<?php echo ($<% echo $field->label; %> != '' && $<% echo $field->label; %> == 'false' ? ' selected' : ''); ?>>false</option>
    </td>
  </tr>
<%
  break;
  }
} %>
  <tr>
    <td></td>
    <td><input class="bouton" type="submit" name="add<% echo $this->name; %>submit" value="<?php echo (isset($_GET['objectid']) ? htmlentities($translator->translate('modify')) : htmlentities($translator->translate('add'))); ?>" /></td>
  </tr>
</table>
</form>
  <?php 
  // include the footer of the page
  include 'adminfooter.php';
}
?>
